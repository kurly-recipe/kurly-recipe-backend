import pymysql
import requests
from bs4 import BeautifulSoup


def dbconnect() : 
    conn = pymysql.connect(host='127.0.0.1', user='root', password='root', db='kurlyhack', charset='utf8')
    return conn 

def saveToDB(conn, result) : 

    cur = conn.cursor()

    # recipe_all
    # recipeUrl       result[0]
    # recipe_name     result[1]
    # recipe_img      result[2]
    # recipe_summary  result[3]
    # info_dict       result[4][0~2] n인분, 요리 시간, 난이도
    # recipe_tag      result[5]


    register = 'AutoCrawler'


    # 레시피 정보
    sql1 = "INSERT INTO TB_KURLY_RECIPE (recipe_id, recipe_name, recipe_img, recipe_summary, recipe_serving, recipe_time_min, recipe_difficulty, register) VALUES('"
    sql1.append(result[0]+"', '"+result[1]+"', '"+result[2]+"', '"+result[3]+"', '"+result[4][0]+"', '"+result[4][1]+"', '"+result[4][2]+"')"+"', '"+register+"')")


    sql2 = "INSERT INTO TB_KURLY_RECIPE (recipe_id, register, "
    sql2values = ''
    valuestr = ") VALUES('" + result[0]+"', '"+register

    # 재료 정보
    # ingre_list      result[6]
    # ingre_set       result[7]
    i = 0
    for ingre in result[7]:
        i = i + 1
        sql2.append(', ingredientName'+str(i)+', ingredientInfo'+str(i))
        sql2values.append("', '"+result[6][ingre])
    
    
    sql2.append(valuestr)

    #조리 정보
    # recipe_list     result[8]
    for i in result[7]:

        sql3 = "INSERT INTO TB_KURLY_RECIPE (recipe_id, register, "
        sql3 = "INSERT INTO TB_KURLY_RECIPE (recipe_id, recipe_name, recipe_img, recipe_summary, recipe_serving, recipe_time_min, recipe_difficulty, register) VALUES('"
        sql3.append(result[0]+"', '"+result[1]+"', '"+result[2]+"', '"+result[3]+"', '"+result[4][0]+"', '"+result[4][1]+"', '"+result[4][2]+"')"+"', '"+register+"')")

    try:
        sql = '1'
        cur.execute(sql1)
        sql = '2'
        cur.execute(sql2)
        sql = '3'
        cur.execute(sql3)

    except:
        print('오류 sql(' + sql + ') : Insert Error Occurred.')

def main():
    conn = dbconnect()  # DB 연결
    print('연결완료')
    
    # 레시피 범위 세팅
    startRecipeId = 6900000
    endRecipeId = 6900005

    # 레시피 크롤링
    CrawlingBetweenRanges(conn, startRecipeId, endRecipeId)

    conn.close()        # DB 연결 끊기 
    print('연결해제')


def CrawlingBetweenRanges(conn, startRecipeId, endRecipeId):

    for i in range(startRecipeId, endRecipeId):
        if i % 10 == 0:
            print("count: " + str(i))
        result = PageCrawler(str(i))
        if result is None:
            continue
        
        saveToDB(conn, result)

def PageCrawler(recipeUrl):
    baseUrl = 'http://www.10000recipe.com/recipe/'
    url = baseUrl + recipeUrl

    page = requests.get(url)
    soup = BeautifulSoup(page.content, 'html.parser')


    # 변수목록
    # recipe_name       : 메뉴 이름
    # recipe_img        : 메뉴 이미지
    # recipe_summary    : 메뉴 설명
    # recipe_info_1     : n인분
    # recipe_info_2     : 요리 시간
    # recipe_info_3     : 난이도
    # ingredient_name   : 재료 이름
    # ingredient_count  : 계랑 숫자
    # ingredient_unit   : 계량 단위
    # ingredient_main   : 조미료 판단
    # recipe_step_txt   : 레시피 순서 txt
    # recipe_step_img   : 레시피 순서 img

    # recipe_user_id      = '' # 등록자 id
    recipe_summary      = '' # 설명
    # ingredient_id 		= '' # 재료목록 id
    # recipe_category 	= [] # 카테고리
    recipe_tag 		    = [] # 태그

    # recipe_name         = '' # 레시피 사용자 제목
    # recipe_img          = ''
    # recipe_step_txt     = [] # 레시피 순서
    
    info_dict = []
    ingre_list = []
    ingre_dict = {}
    recipe_list = []
    recipe_dict = {}
    ingre_set = set() # 재료 목록들을 담기 위한 set

    try:
        # recipe_name
        res = soup.find('div', 'view2_summary')
        res = res.find('h3')
        # recipe_name.append(res.get_text())
        recipe_name = res.get_text()

        # recipe_img
        res = soup.find('div', 'centeredcrop')
        res = res.find('img')
        recipe_img = res.get('src')

        # recipe_summary
        res = soup.find('div', 'view2_summary_in')
        recipe_summary = res.get_text().replace('\n','').strip()

        # recipe_info
        res = soup.find('span', 'view2_summary_info1') # n인분
        recipe_info_1 = res.get_text()
        res = soup.find('span', 'view2_summary_info2') # 요리 시간
        recipe_info_2 = res.get_text()
        res = soup.find('span', 'view2_summary_info3') # 난이도
        recipe_info_3 = res.get_text()

        # info dict
        info_dict = [
            recipe_info_1,
            recipe_info_2,
            recipe_info_3
        ]
    except(AttributeError):
        return

    # 재료 찾는 for문 가끔 형식에 맞지 않는 레시피들이 있어 try/ except 해준다
    try:
        # ingredient
        res = soup.find('div', 'ready_ingre3')

        for n in res.find_all('ul'):
            for tmp in n.find_all('li'):
                ingredient_name = tmp.get_text().replace('\n','').replace(' ','')
                count = tmp.find('span')
                ingredient_tmp = count.get_text()
                ingredient_name = res.sub(ingredient_tmp, '', ingredient_name) # ingredient_name
                ingredient_unit = ingredient_tmp.replace('/','').replace('+','')
                ingredient_unit = ''.join([i for i in ingredient_unit if not i.isdigit()]) # ingredient_unit
                ingredient_count = res.sub(ingredient_unit, '', ingredient_tmp) # ingredient_count
                # ingre_list
                ingre_info = [
                    ingredient_name,  # ingre_name
                    ingredient_count, # ingre_count
                    ingredient_unit   # ingre_unit
                    ]
                ingre_list.append(ingre_info)

                # set에 업데이트
                ingre_set.add(ingredient_name)
    except (AttributeError):
        return

    # 재료 형식에 맞지 않게 올라온 글들 skip
    if not ingre_list:
        return

    try:
        #요리 순서 찾는 for문
        res = soup.find('div','view_step')
        i = 0

        for n in res.find_all('div','view_step_cont'):
            i = i + 1
            # 나중에 순서를 구분해주기 위해 숫자와 #을 넣는다.
            recipe_step_txt = '#' + str(i) + ' '
            recipe_step_txt.append(n.get_text().replace('\n',' '))

            # 이미지 url 찾기 
            tmp = n.find('img')      
            recipe_step_img = tmp.get('src')

            # recipe_list
            recipe_dict = {"txt":recipe_step_txt,
                            "img":recipe_step_img,}
            recipe_list.append(recipe_dict)
    except(AttributeError):
        return
    
    #블로그 형식의 글은 스텝이 정확하게 되어있지 않기 때문에 제외해준다
    if not recipe_step_txt:
        return

    #해시태그가 글 내에 있는지 판단하고 출력해주는 for문
    if (res.find('div','view_tag')):
        recipe_tag = res.find('div','view_tag').get_text()

    recipe_all = [
          recipeUrl
        , recipe_name
        , recipe_img
        , recipe_summary
        , info_dict
        , recipe_tag
        , ingre_list
        , ingre_set
        , recipe_list
    ]
    # recipe_all = [recipe_title, recipe_source, recipe_step, recipe_tag] #제목, 재료, 순서, 테그

    return (recipe_all)

if __name__=="__main__" :
    main()
